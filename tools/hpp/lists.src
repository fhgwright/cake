<REM>
    (C) 1995-97 AROS - The Amiga Replacement OS
    $Id$

    Convert this with: hpp test.inc lists.src > lists.html
</REM>

<TEMPLATE NAME="$functiontmpl">
<SET desc="Add a node to the head of a list"
     lang="english"
     mlab="list"
     returntype=""
     funcname=""
     libname=""
     offset=""
     notes=""
     internals=""
     local_includes=""
>
<BLOCK local_includes>
    #include <assert.h>
</BLOCK>
<BLOCK includes>
    #include <exec/lists.h>
    #include <proto/exec.h>
</BLOCK>
<aros_lhi ret="void" name="AddHead">
<BLOCK synopsis>
    <aros_lha type="struct List *" name="list" reg="A0">,
    <aros_lha type="struct Node *" name="node" reg="A1">
</BLOCK>
<LOCATION type="struct ExecBase *" var="SysBase" offset="40" name="Exec">
<BLOCK function>
    Insert node <C>node</C> at the beginning of the list <C>list</C>.
</BLOCK>
<BLOCK inputs>
    <arg name=list> The list to insert the node into
    <arg name=node> This node is to be inserted
</BLOCK>
<BLOCK result>
    None.
</BLOCK>
<BLOCK example>
    #include <exec/lists.h>
    #include <proto/exec.h>

    struct List list;
    struct Node node;

    /* Insert Node at top */
    NewList (&list);
    AddHead (&list, &node);
</BLOCK>
<BLOCK seealso>
    <mref name=list>
</BLOCK>
<BLOCK source>
    assert (node);
    assert (list);

    /*
	Make the node point to the old first node in the list and to the
	head of the list.
    */
    node->ln_Succ = list->lh_Head;
    node->ln_Pred = (struct Node *)&list->lh_Head;

    /*
	Now we let the old first node point to us and replace it in the
	list header.
    */
    list->lh_Head->ln_Pred = node;
    list->lh_Head	   = node;
</BLOCK>
</TEMPLATE>
