I've thought about these library function archives. Here is my result:
I think it is useful to integrate the autodocs into this new structure
to make automatic autodoc-creation (that's why they have this name ;-)
easier.

Structure:

This is what I think may be a good structure of a function archive
------------------------------------------------------------
#Archive
#Header
...
#/Header

#Function ...
...
#/Function

#Function ...
...
#/Function

#/Archive
------------------------------------------------------------


ARCHIVES
First line has to be "#Archive", end of archive is marked with "#/Archive".
Nothing will be used before the beginning and after the end. So we can put
CVS headers on top of these archives and notes at the end.


HEADER
"#Header" and "#/Header" embrace the header to be put in front of the
produced code. If Archives are merged, headers are compared, if they equal
only one header is taken into account otherwise the 2nd header will be
appended.
I hope I understood the meaning of 'Headers' -- which is: they are part of
the code prepended before the .c file to be compiled.

NOTE: Comparing headers is a critical thing, since one sole space could
make the headers differ and make the tool append equal headers...
We could use the 'diff -u' tool to find differences and then add the "+ ..."
lines, which is also not very elegant...


FUNCTIONS
Functions are embraced by "#Function" and "#/Function".
Here we have to specify:

#Function LHA <return-type> <function-name>
#Parameter <type> <name> <register>
#Parameter ...
#LibOffset <number>

#AutoDoc
...
#/AutoDoc
#Code
{
...
}
#/Code
#/Function

This should be clear ;-) except "#AutoDoc":

"#AutoDoc" has fields to hold information filled in into the AutoDocs.
The Syntax is for one line of text:
#Keyword Blah
or for multiple lines:
#Keyword
Blah,
<newline>
blah
<preformatted>
 - One
 - Two
 - Three
</preformatted>
#/Keyword

Multiple lines are SGML style (I think we want that), so I've put some
weird invented SGML commands ;-)
Maybe we should allow SGML only on some fields where real text will be used
like "#Result" or "#Example". I thought of making life easier and introduce
"#Item" for the other fields (namely "#Inputs") to specify multiple list
entries.

Keywords would then be:
#Function What this function does

#Intputs				/* NO SGML! */
#Item first var description
#Item second var description
#/Inputs

#Result ...

#Notes ...

#Example ...

#Bugs ...

#SeeAlso				/* NO SGML! */
#Item ...
#/SeeAlso

#Internals ...

#History ...

In my example arch of mathffp basic (+-*/) functions I killed
AROS_LIBFUNC_INIT and AROS_LIBFUNC_EXIT. I hope they can be reconstructed
by the new tool.

So we need a bunch of tools (or at least one tool with many functions ;-)
to operate with our archives:
We have to
- merge Archives (we want to replace general functions by os/arch specific)
- produce c sources to compile
- produce AutoDocs (not _very_ important *now*)
- extract single function / multiple functions into one/more files
- test Archive
(just looked at 'lha' syntax ;-)
- make a list of functions in the archive (used by libtool for functable.c)

Things I'm not sure that we don't want to do this by hand:
We must of course:
- add single functions
- remove single functions
- sort the archive

I've everyone agrees with that I can start writing a program.

