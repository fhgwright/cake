\chapter{Informations for Developers}

\section{Differences between AmigaOS and AROS}

This document is a collection of things which are different between AROS and the
original AmigaOS and how they are handled in order to be compatible.

\section{Pointer/Integer conversions}

If you need a variable which can store a pointers as an integer, don't use
|ULONG| but |IPTR|. AROS gurantees that |LONG| is 32bit on all systems, while
|IPTR| is always large enough to contain a pointer. Most notable things
which are affected by this: |TagItem|s (the |ti_Data| field is now an |IPTR|
instead of |ULONG|), BOOPSI classes (eg. the return value of |DoMethod()|),
|ReadArgs()|, |VPrintf()|, |VFPrintf()| and more.

\section{64bit variables}

The type of 64bit variables is |QUAD| (unsigned: |UQUAD|). This is for example
returned by the function |SMult64()| of Utility.library. To access the
high- and loworder 32bit values of the 64bit variable, use |LOW32OF64()|
and |HIGH32OF64()| which are defined in \filename{AROS/include/aros/64bit.h}.

\section{Cloning RastPorts}

AROS uses an external driver to access the graphics hardware. Since the
nature of this driver is unknown to AROS, it is no more valid to clone
a RastPort by simply copying it. To be compatible, there are two new
functions (in AROS) or macros (on Amiga): |CreateRastPort()|,
|CloneRastPort()| and |FreeRastPort()|. You must call |CloneRastPort()| to
create a copy or |CreateRastPort()| for an empty RastPort and
|FreeRastPort()| after you´ve done your work with it.

This approach produces equivalent code on the Amiga but on AROS it can slow
things down a bit. If you must preserve the original state of the RastPort,
it's more save to create a clone, work on it and then dispose it again. It
can also be faster if you would have to make a lot of changes to the RastPort
to create two clones and set them to the two states you need. But your code
should not depend on certain gains or losses of speed due to cloned RastPorts
since the behaviour of the underlying graphics system is undefined.

\section{Tag values}

The original AmigaOS doesn't use the tags below |USER_TAG| (have a look at
\filename{include:utility/tagitem.h} if you don't belive me) which means, you shouldn't use
tags at or near |USER_TAG| because then they might interfere with the OS's
own tags. To solve this, AROS *does* use the tags *below* |USER_TAG| and the
various implementators need not fear that their tags may overlap with the
one from the system. The file \filename{AROS/include/utility/tagitem.h} now contains the
basic offsets for the various parts of the OS. In the future, it might be
possible for users to allocate ranges of tags for specific uses.

\section{DoMethod() or the stack is all wrong}

Short: \bold{Don't use DoMethod(), use DoMethodA().}

There are CPUs around which don't care that the rest of the world have
stacks which grow from large to small adresses. HPPA is an example for
this. While it might look neat to the engineers who did it, it breaks our
code. Another thing which breaks the code are small data types (eg. |WORD|,
|UBYTE|, etc), because most systems put only integers or longs and pointers
on the stack. So if some Msg structure expects |WORD| (see
\filename{include:intuition/gadgetclass.h}),
this fails on every system but the Amiga. To
overcome this, we introduce this rule:

\begin{emph}
If you want to pass a structure with |DoMethod()| and |DoMethodA()|
or similar functions, you must prepend "STCK" to each type, like
this: |WORD| becomes |STCKWORD|, |ULONG| becomes |STCKULONG|, etc.
\end{emph}

If you want to be save: Don't use |DoMethod()| at all. It's very likely
that the final AROS release will not support it at all.

\section{One for all and all for one - CVS}

CVS is a software to maintain a database which contains the sources of a
project one works on. The software offers a list of commands to merge the
most recent version of the project with the local sources and to publish
changes on has made over the Internet.

\subsection{CVS on Un*x}

If you have Linux or any other Un*x, then all you need is CVS 1.8 or better.
If it's not already on your system (type \shell{cvs} to find out), fetch
if from one of the many GNU mirrors and install it in your \filename{$HOME}.

Then get the AROS developer archive from the AmiNET and compile
\filename{crypt.c} (just say \shell{make crypt}. Think of a good password
and use \filename{crypt} to encode it, like this:

\begin{example}
> make crypt
> crypt my_password
Encrypting my_password: cbEVHg0j9uNRs
\end{example}

Now skip the next section and read on in "How get access to the AROS CVS
server".

\subsection{CVS on Amiga}

If you have an Amiga, you can participate, too. Just get the CVS from
ADE, install it and get the demo for AmiTCP 4.0 (\filename{AmiTCP-demo-40.lha}
in \filename{comm/tcp}) from AmiNET. You also must have
\filename{ixemul.library} 45.0 (should come with ADE) and
\filename{ixnet.library} in \filename{LIBS:}. Then you can create
your password with \filename{crypt} out of the \filename{AROScrypt.lha}
archive from AmiNET (in \filename{dev/misc}) like this:

\begin{example}
> run amitcp:amitcp
[CLI 8]
> crypt my_password
Encrypting my_password: cbEVHg0j9uNRs
\end{example}

(you must have the directory where crypt is stored in, in your path or
you must do this in the same directory where crypt is).

\subsection{How to get access to the AROS CVS server}

Mail the password you have created to me:
\email{digulla@aros.fh-konstanz.de}. The subject must be
\shell{Access to AROS CVS Server} and with this text in the mail:

\begin{example}
Please add <my_login, eg. digulla> <password, eg. cbEVHg0j9uNRs>
\end{example}

Don't forget to fill in the information :-)

Wait until I confirm this. While you wait, look for CVS 1.8 or better if
you haven't already done so.

\subsection{Logging into the server}

Before you can use any CVS commands, you must log into the server. To do this,
use the CVS command "login":

\begin{example}
> cvs -d :pserver:user@aros.fh-konstanz.de:/home/AROS/CVS login
\end{example}

where \shell{user} is your login, eg. digulla:

\begin{example}
> cvs -d :pserver:digulla@aros.fh-konstanz.de:/home/AROS/CVS login
\end{example}

This should ask you for your password. Type it in and if there is no error
displayed, you are connected. If there is an error, try to omit the
":pserver:". If this still doesn't work, double check for
typos and if you really, really, really can't find anything, then you
got my email.

\begin{emph}
It seems that the protocol for CVS has changed. Version of CVS
upto 1.8.1 and earlier need not have ":pserver:" before the login name,
but later versions require it. If you have problems to login, try to omit
":pserver:" or prepend it. If CVS wants it, you will get an error reading
"cvs login: can only use pserver method with `login' command".
\end{emph}

If the login has succeeded, then you can save you some typing by storing
the argument to the \shell{-d} option in the environment
variable \shell{CVSROOT}. Use
\shell{setenv CVSROOT :pserver:user@wi-pc44.fh-konstanz.de:/home/AROS/CVS}
on Amiga or if you have a C shell (csh) and
\shell{export CVSROOT=:pserver:user@wi-pc44.fh-konstanz.de:/home/AROS/CVS}
for Bourne/Korn shells (bash, ksh).

On Amiga, you can make this
permanent by \shell{copy env:CVSROOT envarc:}, on Unix, you must add
this to the shell's startup file (\filename{.cshrc}, \filename{.profile},
\filename{.bashrc}, \filename{.tcshrc}, etc. Read the manual of your
shell to find out). If you don't know what kind of shell you have,
just try \shell{echo $SHELL} or \shell{echo $shell}. This should
print the name of your shell.

If you don't have set this variable, you must add \shell{-d ...}
right after the cvs in the following examples.

Now you can use any CVS command to get a copy of all AROS sources, update
your sources or commit the changes you made.

\subsection{How to get a copy of all AROS sources}

Use the CVS checkout command for this:

\begin{example}
> cvs checkout AROS
\end{example}

This will create a
directory AROS and populate it with all sources.

\subsection{How to update the sources}

If you have some sources and just want to update them, you can use the
CVS update command. Change to the AROS directory and do this:

\begin{example}
> cvs update
\end{example}

This should merge any changes that other users have made into your
sources and create all new directories and files. If you
and someone else has changed the same file, then CVS will try to merge
the changes. That is, if he changed the first part and you the end of the
file, CVS will do all the work for you. If there are changes which CVS
can't resolve (eg. you said |x--;| and the other one |x=x-1;|), then
CVS will put \bold{both} versions in the file. Search for \shell{<<<<}
to find such problems.

You should do this before any commit in case this happens. So before
you commit, do an update, call \filename{make} if any changes were
made, fix the problems and then commit.

\subsection{Commiting changes}

If you have changed a file, then you of course want to share your
work with the other guys. To do this, use the CVS commit command:

\begin{example}
> cvs commit
\end{example}

You can specify a list of files after the \shell{commit} or just do that in
the AROS directory to commit all changes. CVS will then ask you what you
did and send the changes to the CVS server for inclusion. Before you do
that, you should always make an update (see the previous section) to avoid
problems.

\subsection{Creating new files and directories}

You can also add new files or directories with the CVS add command:

\begin{example}
> cvs add file.c
\end{example}

or

\begin{example}
> cvs add dir
\end{example}

Note that \shell{cvs add dir/file} doesn't work. You can only add
files in the current directory.

\subsection{More infos about CVS}

Well, CVS has man pages and info files and here is a nice
\link{link}{http://www.loria.fr/~molli/cvs-index.html}.

