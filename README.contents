WHAT IS THIS
------------

Welcome to the first attempt to explain you how it all works :)

If you read this, you have already downloaded the developer files
for AROS and unpacked it. As you can see, everything is put into
a subdirectory named "AROS" so you can easily get rid of all this.

THINGS THAT ARE MISSING
-----------------------

Yeah, there are some things which are not in this archive for this or
that reason. Here we go:

1) The Amiga system header files are missing for obvious copyright
reasons. You can use the files which come with your C-Compiler
(DICE, SAS/C, StormC++ or Maxxon C++) or the ones from the Amiga
Developer CD 1.1 (that's what I did).

The Developer CD is available at

    Stefan Ossowskis Schatztruhe
    Gesellschaft für Software mbH
    Veronikastr. 33
    45131 Essen
    Germany

    Order Phone: ++49-(0)2 01-78 8778

    Fax: ++49-(0)2 01 - 79 84 47
    EMail: stefano@tchest.e.eunet.de
    WWW: http://www.schatztruhe.de/
    Support-Mailbox: ++49-(0)2 08-20 25 09

for DM 25.- (about $15) plus P&P. The CD contains all includes you need
and furthermore you can find there valuable information like: The autodocs,
the examples for the various developer disk sets and the Rom Kernel Reference
Manuals (RKRMs), several tools to help to develop code and more. At the
price, it's a bargain.

2) Linux 2.0 for Intel CPUs (1.2.13 might work, but I haven't tried and
won't do it).

3) GNU make 3.74 or better - A real make is neccessary and this is
one.

4) GCC 2.7.0 or better (2.7.2 is recommended because of the magnitude
of bugs fixed).

5) GAS/as from binutils 2.6 or better

6) GDB, the GNU debugger. It is no great help in our project because we do
nasty things with the stack, but better than nothing anyway.

7) GAWK to generate a couple of files.

There are a couple of files and directories below AROS and here is
a short overview of what they are and what you can do with them.

THINGS WHICH ARE INCLUDED
-------------------------

README* - Numerous READMEs which explain different aspects of AROS

arosshell.c - The main code for the shell which allows you to execute AROS
	commands as you are used to it on you beloved Amiga. Also a very
	small demo of how it works and also probably the most small demo
	that does something useful.

crypt.c - This is a small program which allows you to create a password if
	you want to use the CVS server (prefered). See README.CVS for how
	it works.

tpl.c - Template file for AROS system library functions. Each function
	gets it's own file.

makefile - This is the magic file which holds the whole crap together.
	It has the following rules:

	"clean" - Delete all generated files.

	"all" - This is the default rule: Check (almost) all dependencies
		and generate (almost) all files.

	"includes" - Generate/update some AROS include files, mostly
		files in include/clib/.

	"dist" - Generate .tar.gz and .lha archives. They are put into
		AROS/dist/. Make sure you have set the version in make.cfg
		beforehand.

make.cfg - Global settings for the Makefiles. Each makefile reads this file
	before it does anything else (well, almost... most makefiles set a
	path to this file first :-) ) It sets up some interesting paths:

	$(OSGENDIR) - Use this path for all files which should go into
		the OS itself.

configure - This is a small script which examines your system and creates a
	file named "host.cfg" which is used by the makefile

host.cfg - This is read by the Makefile to get the name of your C compiler,
	options that I should use and more. If this file is missing, make
	will generate it for you.

purify - A small script which can be put in front of the C compiler
	like this:

	    purify cc ...

	It will modify some options to purify the code.

bin/ - This directory contains all generated files under the name of your
	OS (eg. bin/linux/). This directory is called $(ARCHDIR). Below this
	are two more directories: $(BINDIR) where the files should be put
	which the end user should see and $(GENDIR) where you can create
	a directory to put all files one part of AROS needs (eg. libs/ or
	os/). The diretory $(OSGENDIR) is below $(GENDIR) and all *.o files
	in this directory are collected to the AmigaOS.lib.

c/ - This directory contains a couple of applications for AROS and some
	demos.

alib/ - contains the source for the amiga.lib

amiga/ - This is the directory where you can (and should) put things which
	are copyrighted by someone and thus now part of the archive; right
	now this means only the amiga header files which you get along with
	your C-Compiler (eg. DICE, SAS/C, StormC++, Maxon C++) or from the
	Amiga Developer CD 1.1 (recommended since it's the most simple and
	inexpensive way to get them). The CD is available at your local
	dealer or by mail order. Just put the includes into a subdir
	"include" below "amiga" and AROS will find them there.

aros/ - contains code for the aros.lib; this library contains several
	function which make your life easier.

devs/ - System devices: console.device

dist/ - "make dist" will put an archive with all files for developers
	and users in this directory. Make sure the version in make.cfg
	is set to the correct value because it will be used to determine
	the name of the archive.

dos/ - The first library which is added to the OS by standard operations.
	Use this one as a starting point if you want to develop own
	libraries. Here is a list of interesting files:

	dos_functable.c - An array which all functions of the library.
		It is generated by a script from the headers of all
		*.c-files in this directory.

	dos_init.c - The init-code (lib_init, lib_open, lib_close,
		lib_expunge).

	dos_intern.h - A common include-file for all *.c-files in this
		directory. It must not contain anything which is necessary
		outside this directory.

	dos_debug.h - Enable and disable debugging for a function of the
		library.

	makefile - This is a good example of how a makefile for a library,
		which is linked into the system, should look like

	All other files are functions of the library with one function
	per file. Each file contains an AutoDoc-like header and some
	extra infos which are needed by the scripts. If possible each
	file should also contain a test which can be enabled with -DTEST.
	See "filepart.c" for a good example.

exec/ - The source for the exec.library. This is no good starting point
	for own libraries since Exec is not initialized like other
	libraries and so some things are handled differently here.

	Exec relies on some files which are in $(KERNEL)/.

filesys/ - A starting filesystem which uses the Linux ext2fs to emulate
	a DOS device, the basics for a NULL: device and the beginning of
	a RAM Disk.

graphics/ - Sourcecode for the graphics.library. See dos/ for more
	information.

i386-emul/ - Linux version of the kernel. It consists mainly of a bunch
	of assembler files which implement functions that can't be done
	in C (eg. semaphores, stack handling or task switching). Note that
	this is the only directory which may contain assembler files and
	which is different for every architecture. If you begin your work
	on some new architecture, make such a directory for your hardware
	and put all hardware dependend files in there. It is a rule that
	you can do anything inside this directory as long as it has no
	influence on the other files and diretories. The directory must
	support the standard rules "all" and "clean" and read "make.cfg".
	All files generated by the makefile should go into $(OSGENDIR).

	Some files in here might be of interest:

	init.c - This file contains the real main() and sets up all
		libraries, devices and all other stuff which must be
		known before the first user process can begin to work.

	machine.h - Constants which allow Exec to adjust to the local
		hardware.

	makefile - This is a good example of how sub-makefiles for AROS
		should look like.

intuition/ - Sourcecode for the intuition.library. See dos/ for more
	information.

m68k-emul/ - Untested assembler code for machines which have an 680x0
	CPU but which are not Amigas (Mac, for example).

m68k-native/ - Untested assembler code for Amiga hardwares. Untested means:
	They might work but I haven't tried. They should be a good
	basis for beginning the work to make AROS run on an Amiga but
	you should first have a look at i386-emul/ which is the most
	upto-date version.

test/ - Testcode which is more complex.

utility/ - Sourcecode for the utility.library. See dos/ for more
	information.

