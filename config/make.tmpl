# GNU Make automatic variables
# $@ current target
# $< First dependency
# $? All newer dependencies
# $^ All dependencies
# $* The stem (ie. target is dir/a.foo.b and the pattern is
#    a.%.b, then the stem is dir/foo)

# Create one directory without any output
%define mkdir_q dir=.
	@if [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else true ; fi
%end

# Create several directories without any output
%define mkdirs_q dirs=/M
	@for dir in %(dirs) ; do \
	    if [ ! -d $$dir ]; then $(MKDIR) $$dir ; else true ; fi ; \
	done
%end

# Assemble the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define assemble_q cmd=$(AS) opt=$(AFLAGS) from=$< to=$@ err=$*.err
	@$(ECHO) "Assembling $(CURDIR)/%(from)..."
	@%(cmd) %(opt) -c %(from) -o %(to) 2>&1|tee %(err)
	@if test -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

# Compile the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define compile_q cmd=$(CC) opt=$(CFLAGS) from=$< to=$@ err=$*.err
	@$(ECHO) "Compiling $(CURDIR)/%(from)..."
	@%(cmd) %(opt) -c %(from) -o %(to) 2>&1|tee %(err)
	@if test -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

%define link_q cmd=$(CC) opt=$(ILDFLAGS) startup=$(STARTUP) from=$< to=$@ err=$(@F)-x.err libs=$(LIBS)
	@$(ECHO) "Linking %(to)..."
	@%(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) 2>&1|tee %(err)
	@if test -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

# Create the library
%define mklib_q ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
%end

# Create the dependency file %(to) for %(from) in the directory %(dir)
%define mkdepend_q flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@if [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else true ; fi
	@$(ECHO) "Makedepend $(CURDIR)/%(from)..."
	@$(MKDEPEND) -f- -p%(dir)/ %(opt) -- %(flags) -- %(from) > %(to)
%end

# Add section with all necessary libs and dependencies for linking
%define define_libs prelibs= postlibs= deplibs=
STARTUP = $(LIBDIR)/startup.o
LIBS = -L$(LIBDIR) %(prelibs) -lamiga -larossupport -larosc %(postlibs)
DEPLIBS = $(LIBDIR)/libamiga.a $(LIBDIR)/libarossupport.a $(STARTUP) \
	$(LIBDIR)/libarosc.a %(deplibs)
%end

# Do something in all subdirs
# This macro uses a trick: %(target) is evaluated *after* %(text), so one
# can use %(target) in %(text).
%define subdirs_q text="Making %(target)" target=$(TARGET) dirs=$(SUBDIRS) curdir=$(CURDIR) mflags=$(MFLAGS)
	@for dir in %(dirs) ; do \
	    echo "%(text) in %(curdir)/$$dir..." ; \
	    if test ! -e $$dir/makefile ; then \
		echo "Generating makefile..." ; \
		$(AWK) -f $(TOP)/scripts/genmf.gawk \
		--assign TOP="$(TOP)" \
		$$dir/makefile.src > $$dir/makefile || exit 1 ; \
	    fi ; \
	    if ( cd $$dir ; \
		$(MAKE) %(mflags) TOP="$(TOP)/.." CURDIR="%(curdir)/$$dir" \
		TARGET=%(target) %(target) ) ; \
	    then true ; else exit 1 ; fi ; \
	done
%end

# Prepare creation of a shared lib
%define prepare_shlib lib=dummy shflag=$(SHARED_DUMMY)
OBJDIR=$(OSGENDIR)/%(lib)
ifeq ("%(shflag)","yes")
LIB=$(LIBDIR)/lib%(lib).so
RMLIB=$(LIBDIR)/lib%(lib).a
AR=$(SHARED_AR)
RANLIB=true
else
LIB=$(LIBDIR)/lib%(lib).a
RMLIB=$(LIBDIR)/lib%(lib).so
endif
%end

# Generate function table
%define mkfunctable_q lib=dummy from=$^ to=$@
	@$(ECHO) "Regenerating %(to)..."
	@$(AWK) -f $(TOP)/scripts/makefunctable.awk \
	    --assign lib="%(lib)" %(from)
%end

# Common rules for all makefiles
%define common
# Check if the makefile itself must be remade
clean ::
	$(RM) makefile makefile.bak

all : makefile

# Remake makefile
makefile : makefile.src $(TOP)/scripts/genmf.gawk \
	    $(TOP)/config/make.tmpl
	@$(ECHO) "Regenerating makefile..."
	@$(MV) $@ $@.bak
	@$(AWK) -f $(TOP)/scripts/genmf.gawk --assign TOP="$(TOP)" \
	    $< > $@

%end

# Include the dependency files and add some internal rules
%define include_deps deps=$(DEPS)/M
# Include these files but only if the current target is neither
# setup nor clean.
ifneq ("$(TARGET)","clean")
ifneq ("$(TARGET)","setup")
include %(deps)
endif
endif
%end

# rule to generate libdefs.h
%define libdefs_rule
libdefs.h: lib.conf $(TOP)/scripts/genlibdefs.gawk
	@echo "Generating $@..."
	@$(AWK) -f $(TOP)/scripts/genlibdefs.gawk lib.conf > libdefs.h
%end
