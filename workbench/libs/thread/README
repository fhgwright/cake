README for thread.library

Author: Robert Norris <rob@cataclysm.cx>
Last update: 2007-11-30

This is trivial library to provide basic threads and synchronisation
primitives to higher-level libraries and applications. It currently provides
the following:

 - Threads
 - Mutexes
 - Condition variables

This is a work-in-progress. Expect freakish things to happen if you use it.
Please let me know if something doesn't work the way you want or expect it to.
Both the interface and semantics are fluid, so you can get things changed if
you want, but on the other hand you'll need to track changes to the library in
your app.

This library is deliberately designed not to be POSIX threads. My hope is that
it could be used to implement them, but it won't ever be that all by itself.
POSIX thread semantics are more complicated than I want to deal with at this
level.

The biggest omission at this stage is a way to force a thread to exit. Its
hard to do because there's no way to know what resources the thread currently
has open in order to close them. I have some ideas, but I don't know that it
can be done well without proper task resource tracking.

In a similar vein, when your application or library closes thread.library (in
an app, this will typically happen when main() exits), any threads that are
still running will be killed by calling RemTask() on them, so again, their
resources will not be recovered. You'll get some warnings in the kernel log,
as this may make AROS quite unstable, depending on what your threads are
doing. Read the comment in thread_init.c for details, and then make sure that
all the threads are finished before you close thread.library.

TODO

 - A way to gracefully ask a thread to exit (giving the thread opportunity to
   clean up)

 - A way to wait for all threads to finish (including detached threads, so
   this can be used usefully to wait for threads before exiting in main()).

 - Can exiting the main process while threads are still running be handled
   better?

 - Read/write ("promotable") mutexes, where you can request to obtain a lock
   exclusively while already holding it as a shared lock. This can avoid races
   in some situations.
