# GNU Make automatic variables
# $@ current target
# $< First dependency
# $? All newer dependencies
# $^ All dependencies
# $* The stem (ie. target is dir/a.foo.b and the pattern is
#    a.%.b, then the stem is dir/foo)

# Create one directory without any output
%define mkdir_q dir=.
	@$(IF) $(TEST) ! -d %(dir) ; then $(MKDIR) %(dir) ; else $(NOP) ; fi
%end

# Create several directories without any output
%define mkdirs_q dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

# Same, more noisy
%define mkdirs dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

# Assemble the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define assemble_q cmd=$(AS) opt=$(AFLAGS) from=$< to=$@ err=$*.err
	@$(ECHO) "Assembling $(CURDIR)/%(from)..."
	@%(cmd) %(opt) -c %(from) -o %(to) 2>&1|tee %(err)
	@$(IF) $(TEST) -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

# Compile the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define compile_q cmd=$(CC) opt=$(CFLAGS) from=$< to=$@ err=$*.err
	@$(ECHO) "Compiling $(CURDIR)/%(from)..."
	@%(cmd) %(opt) -c %(from) -o %(to) 2>&1|tee %(err)
	@$(IF) $(TEST) -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

%define link_q cmd=$(CC) opt=$(ILDFLAGS) startup=$(STARTUP) from=$< to=$@ err=$(@F)-x.err libs=$(LIBS) us=undefdsyms.list
	@$(ECHO) "Linking %(to)..."
	@%(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) 2>&1|tee %(err)
	@$(ECHO) "Checking %(to)..."
	@$(CHECKUDS) %(to) > %(us)
	@$(IF) $(TEST) -s %(us); then \
	    cat %(us) >> %(err); \
	    echo "There are undefined symbols in %(to):"; \
	    cat %(us); \
	else $(NOP) ; fi
	@$(RM) %(us)
	@$(IF) $(TEST) -s %(err); then $(TOUCH) $(TOP)/errors ; else $(RM) %(err) ; fi
%end

%define checkuds us=undefdsyms.list err=$(@F)-x.err to=$@
	@$(ECHO) "Checking %(to)..."
	@$(CHECKUDS) %(to) > %(us)
	@$(IF) $(TEST) -s %(us); then \
	    $(CAT) %(us) >> %(err); \
	    $(ECHO) "There are undefined symbols in %(to):"; \
	    $(CAT) %(us); \
	else $(NOP) ; fi
	@$(RM) %(us)
%end

# Create the library
%define mklib_q ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
%end

# Same but more noisy
%define mklib ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	%(ar) %(to) %(from)
	%(ranlib) %(to)
%end

# Create the dependency file %(to) for %(from) in the directory %(dir)
%define mkdepend_q flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/%(from)..."
	@$(MKDEPEND) -f- -p%(dir)/ %(opt) -- %(flags) -- %(from) > %(to)
%end

# Same but more noisy
%define mkdepend flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/%(from)..."
	$(MKDEPEND) -f- -p%(dir)/ %(opt) -- %(flags) -- %(from) > %(to)
%end

# Add section with all necessary libs and dependencies for linking
%define define_libs prelibs= postlibs= deplibs=
STARTUP = $(LIBDIR)/startup.o
LIBS = -L$(LIBDIR) %(prelibs) -larossupport -lamiga -larosc %(postlibs)
DEPLIBS = $(LIBDIR)/libamiga.a $(LIBDIR)/libarossupport.a $(STARTUP) \
	$(LIBDIR)/libarosc.a %(deplibs)
%end

# Do something in all subdirs
# This macro uses a trick: %(target) is evaluated *after* %(text), so one
# can use %(target) in %(text).
%define subdirs_q text="Making %(target)" target=$(TARGET) dirs=$(SUBDIRS) curdir=$(CURDIR) mflags=$(MFLAGS) submf=makefile top=$(TOP)
	@$(FOR) dir in %(dirs) ; do \
	    $(ECHO) "%(text) in %(curdir)/$$dir..." ; \
	    if $(TEST) -e $$dir/%(submf).src && \
		{ $(TEST) ! -e $$dir/%(submf) \
		-o $$dir/%(submf).src -nt $$dir/%(submf) \
		-o %(top)/config/make.tmpl -nt $$dir/%(submf) ; } ; then \
		$(ECHO) "Generating %(submf)..." ; \
		$(AWK) -f $(TOP)/scripts/genmf.gawk \
		--assign TOP="$(TOP)" \
		$$dir/%(submf).src > $$dir/%(submf) || exit 1 ; \
	    fi ; \
	    if ( cd $$dir ; \
		$(MAKE) %(mflags) --file=%(submf) \
		    TOP="%(top)/.." CURDIR="%(curdir)/$$dir" \
		    TARGET=%(target) %(target) ) ; \
	    then $(NOP) ; else exit 1 ; fi ; \
	done
%end

# Prepare creation of a shared lib
%define prepare_shlib lib=dummy shflag=$(SHARED_DUMMY)
ifeq ("%(shflag)","yes")
LIB    := $(LIBDIR)/lib%(lib).so
RMLIB  := $(LIBDIR)/lib%(lib).a
AR     := $(SHARED_AR)
RANLIB := $(NOP)
else
LIB    := $(LIBDIR)/lib%(lib).a
RMLIB  := $(LIBDIR)/lib%(lib).so
endif
%end

# Generate function table
%define mkfunctable_q lib=dummy from=$^ to=$@
	@$(ECHO) "Regenerating %(to)..."
	@$(AWK) -f $(TOP)/scripts/makefunctable.awk \
	    --assign lib="%(lib)" %(from)
%end

# Generate endskip variable
%define mkendtag_q lib=dummy to=$@
	@$(ECHO) "Regenerating %(to)..."
	@$(AWK) -f $(TOP)/scripts/makeendtag.awk \
	    --assign lib="%(lib)"
%end

# Common rules for all makefiles
%define common
# Delete generated makefiles
clean ::
	$(RM) mmakefile mmakefile.bak

%end

# Include the dependency files and add some internal rules
%define include_deps deps=$(DEPS)/M nodepstargets=
# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% setup% includes% %(nodepstargets),$(TARGET)))
include %(deps)
endif
%end

# rule to generate libdefs.h
%define libdefs_rule conffile=lib.conf script=$(TOP)/scripts/genlibdefs.gawk dest=libdefs.h
%(dest) : %(conffile) %(script)
	@$(ECHO) "Generating $@..."
	@$(AWK) -f %(script) $< > $@
%end

%define genlib_old flags=$(CFLAGS) cc=$(CC)
ifndef SLIB
SLIB := $(SLIBDIR)/$(LIBNAME).library
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(LIBNAME)_endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef GENLIBDEF_SCRIPT
GENLIBDEF_SCRIPT := $(TOP)/scripts/genlibdefs.gawk
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS),$(OBJDIR)/$(f).o)
endif

# ***** Native ***************
ifeq ($(FLAVOUR),native)

# Generate a map file
MAPGEN	:= -Xlinker -M

# Strip resulting binary
STRIP	:= strip

# ***** Not Native ***************
else

MAPGEN	:=
STRIP	:= $(NOP)

# ***** END ***************
endif

$(SLIB) : $(LIB) $(DEPLIBS) $(OBJS) $(INITFUNC) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(MAPGEN) $(INITFUNC) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.map
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.map; then $(RM) $(LIBNAME)lib.map ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(LIBNAME)_functable.c $(LIBNAME)_endtag.c

$(OBJDIR)/%.o : %.c
	@$(ECHO) "Compiling $(CURDIR)/$<..."
	@%(cc) %(flags) -c $< -o $@ 2>&1|tee $*.err
	@$(IF) $(TEST) -s $*.err ; then $(TOUCH) $(TOP)/errors ; else $(RM) $*.err ; fi

$(LIBNAME)_functable.c : $(foreach f,$(FUNCTIONS),$(f).c) \
	    $(TOP)/scripts/makefunctable.awk
	@$(ECHO) "Regenerating $@..."
	@$(AWK) -f $(TOP)/scripts/makefunctable.awk \
	    --assign lib="$(ULIBNAME)" $^

$(LIBNAME)_endtag.c : $(TOP)/scripts/makeendtag.awk
	@$(ECHO) "Regenerating $@..."
	@$(AWK) -f $(TOP)/scripts/makeendtag.awk \
	    --assign lib="$(ULIBNAME)"

$(OBJDIR)/$(LIBNAME)_init.d : libdefs.h
$(OBJDIR)/$(LIBNAME)_endtag.d : libdefs.h

libdefs.h : lib.conf $(GENLIBDEF_SCRIPT)
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(GENLIBDEF_SCRIPT) $< > $@

$(OBJDIR)/%.d : %.c
	@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$<..."
	@$(MKDEPEND) -f- -p$(@D)/ $(MKDEPEND_FLAGS) -- $(CFLAGS) -- $< > $@
%end

%define genlib flags=$(CFLAGS) cc=$(CC)
ifndef SLIB
SLIB := $(SLIBDIR)/$(LIBNAME).library
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef GENLIBDEF_SCRIPT
GENLIBDEF_SCRIPT := $(TOP)/scripts/genlibdefs.gawk
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

# ***** Native ***************
ifeq ($(FLAVOUR),native)

# Generate a map file
MAPGEN	:= -Xlinker -M

# Strip resulting binary
STRIP	:= strip

# ***** Not Native ***************
else

MAPGEN	:=
STRIP	:= $(NOP)

# ***** END ***************
endif

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(MAPGEN) $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.map
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.map; then $(RM) $(LIBNAME)lib.map ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
	@$(ECHO) "Compiling $(CURDIR)/$<..."
	@%(cc) %(flags) -c $< -o $@ 2>&1|tee $*.err
	@$(IF) $(TEST) -s $*.err ; then $(TOUCH) $(TOP)/errors ; else $(RM) $*.err ; fi

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

endtag.c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
	@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$<..."
	@$(MKDEPEND) -f- -p$(@D)/ $(MKDEPEND_FLAGS) -- $(CFLAGS) -- $< > $@
%end

%define genromlib flags=$(CFLAGS) cc=$(CC)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef GENLIBDEF_SCRIPT
GENLIBDEF_SCRIPT := $(TOP)/scripts/genlibdefs.gawk
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

ALL_OBJS := $(SYS_OBJS) $(OBJS) $(ENDFUNC)

# Collect all functions in a linklib for fast linking:
$(LIB) : $(ALL_OBJS)
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $(ALL_OBJS)
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
	@$(ECHO) "Compiling $(CURDIR)/$<..."
	@%(cc) %(flags) -c $< -o $@ 2>&1|tee $*.err
	@$(IF) $(TEST) -s $*.err ; then $(TOUCH) $(TOP)/errors ; else $(RM) $*.err ; fi

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)
endif

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

endtag.c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
	@$(IF) [ ! -d $(@D) ]; then $(MKDIR) $(@D) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/$<..."
	@$(MKDEPEND) -f- -p$(@D)/ $(MKDEPEND_FLAGS) -- $(CFLAGS) -- $< > $@
%end

# rule to generate asm files from c files (for debugging purposes)
%define asm_rule opt=$(GENASM)
.PHONY : asm
asm : $(foreach f,%(opt),$(f).s) all
%end

# generate asm files from c files (for debugging purposes)
%define ctoasm_q
%.s : %.c
	@$(ECHO) "Generating $(CURDIR)/$@..."
	@$(CC) -S $(CFLAGS) $< -c -o $@
%end

# Used to help with the function replacement mechanism. Use like
#
#	%prepare_replace module=os/exec
#
# This will include the file contain information written out by the
# $(TOP)/config makefiles which is used to filter out files that are
# being replaced by machine dependant versions in the $(TOP)/config
# subtree.
#
# You can also determine which group of files you wish to filter against
# with the filter command. You pass it the variable to modify as var
#
# Eg:
#	%prepare_replace module=os/foobar
#	%filter_replace $(FUNCTIONS)
#
# The variable $(ADDITIONAL_OBJS) will be available for you to link in
# extra files.
#
# You should save the values of the variables which you filter in case
# you need them at a later date.
#
%define prepare_replace module=
-include $(GENDIR)/%(module)/mf.inc
%end

%define filter_replace var=FILES filter=$(SUPPRESS_FILES)
%(var) := $(filter-out %(filter),$(%(var)))
%end

# You can use this to prevent objects which weren't compiled correctly by
# config/$(...) directories to not be compiled by the local makefile.
%define additional_objs_rule
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) Error: One of the precompiled object files did not exist.
	@exit 1
%end

%define add_objects files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "add $$file" ; \
	done
%end

%define exclude_files files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "not $$file" ; \
	done
%end
