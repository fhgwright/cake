Classes are objects of metaclasses, so therefore
classes are created with NewObjectA().

As of now there are three different metaclasses available:

CLID_MIMeta
- Creates classes that supports multiple interfaces.

CLID_SIMeta
- Creates classes that can only support single interfaces.
Advantage is faster method invocation.
(Method invocation doesn't require hashing).

CLID_HiddMeta
- Base metaclass for Hidds. Subclass of CLID_SIMeta.
(HIDDs should be fast).

How to create a class is best shown through an example.
Here is a Timer class with two simple methods,
Start and Stop.
Note, this example doesn't show the New and Dispose
methods and DoSuperMethod() usage, but it is exactly the same as in BOOPSI,
so those familiar with BOOPSI,should find creating classes with this
system simple.


/* In the classes' include file you have to define class ID, interface ID
   method offsets and attribute offset
*/

/* The IDs below should really be genrated by some tool,
   as a combination of current time and some machine
   unique ID, IP address or othe unique entity, to
   assure unique IDs.

*/   

#define CLID_Timer	"timerclass"
#define IID_Timer	"I_timer"


/* Method offset for methods in the IID_Timer interface. */

enum
{
    moTimer_Start	= 0,
    moTimer_Stop,
    
    Num_Timer_Methods	/* number of methods in the Timer interface */
    
};


/* Attribute offsets for attrs in the IID_Timer interface. */

enum
{
    aoTimer_Elapsed = 0,
    
    Num_Timer_Attrs	/* number of attrs in the timer interface */
};


/* private instance data */
struct timer_data
{
    struct timeval start_time;
    struct timeval elapsed_time;
};

/* The methods */


static VOID timer_start(Class *cl, Object *o, Msg msg)
{
    struct timer_data *data;

    data = INST_DATA(tcl, o);

    gettimeofday(&(data->start_time), NULL);

    return;
}

static VOID timer_stop(Class *cl, Object *o, Msg msg)
{
    struct timer_data *data = INST_DATA(tcl, o);
    gettimeofday(&(data->elapsed_time), NULL);

    SubTime(&(data->elapsed_time), &(data->start_time));

    return;
}


#define NUM_TIMER_METHODS 2
Class *make_timerclass()
{

    struct MethodDescr methods[NUM_TIMER_METHODS + 1] =
    {
	{(IPTR (*)())timer_start,		moTimer_Start},
	{(IPTR (*)())timer_stop,		moTimer_Stop},
	{NULL, 0UL} /* must be null-terminated */

    };

    struct InterfaceDescr ifdescr[] =
    {
    	{ methods, "Timer", NUM_TIMER_METHODS },
	{ NULL, 0UL, 0UL} /* must be null-terminated */
    };

    struct TagItem tags[] =
    {
        {A_Meta_SuperID,		(IPTR)CLID_Root},
	{A_Meta_InterfaceDescr,		(IPTR)ifdescr},
	{A_Meta_ID,			(IPTR)CLID_Timer},
	{A_Meta_InstSize,		(IPTR)sizeof (struct timer_data)},
	{TAG_DONE, 0UL}
    };
    
    Class *tcl;

    
    /* Make it a class of the SIMeta */
    tcl = (Class *)NewObjectA(NULL, CLID_SIMeta, tags);


    if (tcl)
    {
    	/* Make the class public */
    	AddClass(tcl);
    }

    return (tcl);
}

VOID free_timerclass(Class *cl)
{
    DisposeObject((Object *)cl);

    return;
}


/* Stubs would look like this */

VOID Timer_Start(Object *timer)
{
    static ULONG mid = NULL;
    
    if (!mid)
    {
    	/* First time executed the stub converts the full method ID
	   (String Interface ID, numeric method offset) into a
	   numeric method ID.
	*/
	
    	mid = GetMethodID(IID_Timer, moTimer_Start);
    }

    DoMethod(timer, (Msg)&mid);
    
    return;	
}


This API is bound to change, as its not flexible enough
(not future-proof), better use tags for specifying all info.

Anyway, have a look at the unixio.hidd and hiddclass implementation
for a bit more complex usage of this system.

