vbcc - C compiler (c) in 1995-97 by Volker Barthelmann


INTRODUCTION

    vbcc is a free portable and retargetable ANSI C compiler.
    It is clearly split into a target independant and a target dependant
    part and supports emulating datatypes of the target machine on any
    other machine so that it is possible to e.g. make a crosscompiler for
    a 64bit machine on a 32bit machine.
    This document only deals with the target dependant parts of the
    PowerPC version.

    This is a pre-alpha version! 


LEGAL

    vbcc is (c) in 1995-97 by Volker Barthelmann. All code is written by me
    and may be freely redistributed as long as no modifications are made
    and nothing is charged for it.
    Non-commercial usage of vbcc is allowed without any restrictions.
    Commercial usage needs my written consent.

    Sending me money, gifts, postcards etc. would of course be very nice
    and may encourage further development of vbcc, but is not legally or
    morally necessary to use vbcc.


ADDITIONAL OPTIONS FOR THIS VERSION

    -merge-constants

                Place identical floating point constants at the same
                memory location. This can reduce program size and increase
                compilation time.

    -const-in-data

                By default constant data will be placed in the code
                section (and therefore is accessable with faster pc-relative
                addressing modes). Using this option it will be placed in the
                data section.
                Note that on operating systems with memory protection this
                option will disable write-protection of constant data.

    -fsub-zero

                Use fsub to load a floating-point-register with zero.
                This is faster but requires all registers to always contain
                valid values (i.e. no NaNs etc.) which may not be the case
                depending on startup-code, libraries etc.


SOME INTERNALS

    The current version generates assembly output for use with the "pasm"
    assembler by Frank Wille. The generated code should work on 32bit systems
    based on a PowerPC CPU using the V.4 ABI.

    The register names are:

        r0 through r31 for the general purpose registers,
        f0 through f31 for the floating point registers and
        cr0 through cr7 for the condition-code registers.

    The registers r0, r3-r12, f0-f13 and cr0-cr1 are used as scratch registers
    (i.e. they can be destroyed in function calls), all other registers are 
    preserved. r1 is the stack-pointer and r13 is the small-data-pointer if
    small-data-mode is used.

    The first 8 function arguments which have integer or pointer types
    are passed in registers r3 through r10 and the first 8 floating-point
    arguments are passed in registers f1 through f8.

    Integers and pointers are returned in r3, floats and doubles in f1.
    All other types are returned by passing the function the address
    of the result as a hidden argument - so when you call such a function
    without a proper declaration in scope you can expect a crash.

    The elementary data types are represented like:

    type        size in bits        alignment in bytes

    char                8                       1
    short              16                       2
    int                32                       4
    long               32                       4
    all pointers       32                       4
    float              32                       4
    double             64                       4


KNOWN PROBLEMS

    - generated code is very poor
    - certain type-conversions do not work
    - returning of structs/unions does not work
    - nested function calls which pass parameters on the stack will not work
    - composite types are put on the stack rather than passed via pointer
    - modulo does not work
    - indication of fp-register-args with bit 6 of cr is not done
    - several other problems


Volker Barthelmann                                      volker@vb.franken.de
Kennedy-Ring 39
91301 Forchheim
Germany

