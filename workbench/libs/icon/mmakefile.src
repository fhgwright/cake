# $Id$
include $(TOP)/config/make.cfg

USER_INCLUDES := -I.

LIBNAME  := icon
ULIBNAME := Icon

SLIB := $(SLIBDIR)/$(LIBNAME).library
LIB  := $(LIBDIR)/lib$(LIBNAME).a

# BEGIN_DESC{makefile}
# This is the makefile for icon.library. Use it if you want to compile
# only this part of AROS.
# END_DESC{makefile}

# BEGIN_DESC{localmakevar}
# \item{FILES} This is a list of all files (without the .c) which
#	contain internal functions of the library (eg. libinit(),
#	libopen(), libexpunge() and the function table).
#
# \item{FUNCTIONS} This is a list of all files (without the .c)
#	with public functions of the library. The makefile will
#	strip all files from this list for which a special
#	version for this CPU does exist.
#
# END_DESC{localmakevar}

# Main function for icon.library. Need this apart as an anchor for the link:
INIT_FILE   := $(LIBNAME)_init
FILES	    := functable basicfuncs diskobjio

# Guarantee that this will go at the end of the file:
END_FILE    := endtag
FUNCTIONS   := \
	addfreelist \
	bumprevision \
	deletediskobject \
	findtooltype \
	freediskobject \
	freefreelist \
	getdefdiskobject \
	getdiskobject \
	getdiskobjectnew \
	matchtoolvalue \
	putdefdiskobject \
	putdiskobject

OBJDIR	    := $(GENDIR)/$(CURDIR)
OBJS	    := $(foreach f,$(FILES) $(FUNCTIONS),$(OBJDIR)/$(f).o)

# The init and endskip object filenames
INITFUNC    := $(OBJDIR)/$(INIT_FILE).o
ENDFUNC     := $(OBJDIR)/$(END_FILE).o

#MM workbench : setup includes linklibs
workbench : show-flags $(SLIB)

# ***** Native ***************
ifeq ($(FLAVOUR),native)

# Generate a map file
MAPGEN := -Xlinker -M

# Strip resulting binary
STRIP  := strip

# ***** Not Native ***************
else

MAPGEN :=
STRIP  := $(NOP)

# ***** END ***************
endif

%define_libs postlibs=-lamiga -l$(LIBNAME)

.PHONY : asm
asm : $(foreach f,$(FUNCTIONS) $(INIT_FILE) $(END_FILE) $(FILES),$(f).s) all

$(SLIB) : $(LIB) $(DEPLIBS) $(OBJS) $(INITFUNC) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@)..."
	@$(CC) $(ILDFLAGS) $(MAPGEN) $(INITFUNC) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.map
	@$(ECHO) "Checking $(notdir $@)..."
	%checkuds
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.map; then $(RM) $(LIBNAME)lib.map ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

#MM
setup :
	%mkdirs_q $(OBJDIR) $(SLIBDIR)

clean ::
	$(RM) $(OBJDIR) *.err *.s

$(OBJDIR)/%.o : %.c
	%compile_q

%genlib

$(OBJDIR)/%.d : %.c
	%mkdepend_q

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

%common
%include_deps $(foreach f,$(INIT_FILE) $(END_FILE) $(FILES) $(FUNCTIONS),$(OBJDIR)/$(f).d)
