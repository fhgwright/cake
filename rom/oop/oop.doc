Overview:
This document tries to explain the choices that
are made in deciding the design of the new OOP
system, which will be used fo (among other things)
the HIDDs.

General design goals:

The system should..

1) have fast method invocation. Especially when calling the same method
on the same objetc many times. (Eg. GetPixel()/SetPixel())


2) allow non-centralized allocation of IDs.


3) be location transparent. Ie. you invoke a
method the same way as for a local objet, even if
the object is owned by another task, or is
located on a different machine.

4) support transparent object migration.


Possible solutions to design goals w/pros & cons

1) Invocation speed.
-------------------
For having ultimately fast method invocation we supply method
objects.

For normal method invocation there are generally
two approaches:

I) Hashing single methods.
II) Hashing interfaces, where an interface
is an array of methods (kinda like a AmigaOS library
jump table.)

I) is a bit faster than 2)

A suggestion by Aaron is
to put all the methods of the
basic interfaces (ie. the Root and Hidd interface in HIDD class)
into a single table, and use array lookup for
invoking methods, and thereby avoid hashing.
This requires (AFAI can see) variable IDs,
and also one global variable pr. method.


2) Noncentralized ID allocation.
-------------------------------
To allow for this, we avoid fixed integer
IDs (like in BOOPSI).
Instead we use global variables for
IDs.

Two ways to allocate IDs:

I)
Store interface IDs in global vars,
and generate method IDs on the fly as
sum of interface ID and a cotand ID for the method.

Example:

extern ULONG __OOPI_Root;

#define I_Root  __OOPI_Root
#define MIDX_Root_New 		0
#define MIDX_Root_Dispose	1

#define M_Root_New	(I_Root + MIDX_Root_New)
#define M_Root_Dispose	(I_Root + MIDX_Root_Dispose)

Pro:
- Uses little mem.
- Relatively little CPU time used for initialization.

Con: uses more CPU time for initialization.

II) 
Use one global var for each methodID.

Pro: 
- Faster pr. call.
- Leaves more flexibility for future changes.
- Allows to specify each method as a string
in MakeClass().

Con:
- Uses more mem.


As for AttrIDs, there is a problem with
using II), because then one can't use switch()
to parse AttrIDs.

Solution: Use methods for set & get of each attribute.
which will use some mem.
